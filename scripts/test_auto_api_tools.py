import asyncio
import json
import sys
from typing import Any, Dict, List, Optional
from pathlib import Path

# Ensure project root on path
ROOT = Path(__file__).resolve().parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

from services.advisor.tools.api_tool import create_auto_api_tools, create_auto_api_tool  # noqa: E402

CONFIG_PATH = ROOT / "data" / "app_config.json"


def load_config() -> Dict[str, Any]:
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


def get_api_tool_config(tool_name: str) -> Optional[Dict[str, Any]]:
    config = load_config()
    tools: List[Dict[str, Any]] = config.get("agent_config", {}).get("tools", [])
    for t in tools:
        if t.get("type") == "api_tool" and t.get("name") == tool_name:
            return t
    return None


def generate_example_value(field_name: str, field_def: Dict[str, Any]) -> Any:
    ftype = (field_def or {}).get("type", "string").lower()
    name = (field_name or "").lower()
    # Heuristics similar to AutoGeneratedAPITool._auto_generate_example
    if "id" in name:
        return "ID_001"
    if "name" in name:
        return "Example Name"
    if "email" in name:
        return "user@example.com"
    if "phone" in name:
        return "+1234567890"
    if "price" in name or "cost" in name:
        return 100.0
    if "quantity" in name or "count" in name:
        return 5
    if "date" in name or "time" in name:
        return "2024-01-15"

    if ftype == "boolean":
        return True
    if ftype == "number":
        return 100.0
    if ftype == "integer":
        return 100
    if ftype == "array":
        return ["item1", "item2"]
    if ftype == "object":
        return {"key": "value"}
    return "example_value"


def build_call_args_from_config(tool_config: Dict[str, Any]) -> Dict[str, Any]:
    call_args: Dict[str, Any] = {
        "api_call_description": f"Testing {tool_config.get('name', 'api_tool')}"
    }

    input_cfg = (tool_config or {}).get("input", {})

    # Params → param_<name>
    params_cfg = input_cfg.get("param", {}) or {}
    for pname, pdef in params_cfg.items():
        if isinstance(pdef, dict):
            if "default" in pdef and pdef["default"] is not None:
                value = pdef["default"]
            else:
                value = generate_example_value(pname, pdef)
            call_args[f"param_{pname}"] = value

    # Body → body_<name>
    body_cfg = input_cfg.get("body", {}) or {}
    for bname, bdef in body_cfg.items():
        if isinstance(bdef, dict):
            if "default" in bdef and bdef["default"] is not None:
                value = bdef["default"]
            else:
                value = generate_example_value(bname, bdef)
            call_args[f"body_{bname}"] = value

    # Headers override → header_<name> (skip accept/content-type)
    header_cfg = tool_config.get("header", {}) or {}
    for hname, hval in header_cfg.items():
        if isinstance(hname, str) and hname.lower() not in ["accept", "content-type"]:
            call_args[f"header_{hname}"] = hval

    return call_args


def print_tool_overview():
    tools = create_auto_api_tools()
    print(f"Discovered {len(tools)} auto-generated API tools from data/app_config.json")
    for tool in tools:
        print(f"- name: {tool.name}")
        print(f"  desc: {tool.description.splitlines()[1] if tool.description else ''}")
        if hasattr(tool.args_schema, 'model_fields'):
            fields = tool.args_schema.model_fields
            print("  fields:")
            for fname, finfo in fields.items():
                ftype = getattr(finfo, 'annotation', None)
                default = getattr(finfo, 'default', None)
                print(f"    - {fname}: {ftype} (default={default})")
        elif hasattr(tool.args_schema, '__fields__'):
            fields = tool.args_schema.__fields__
            print("  fields (pydantic v1):")
            for fname, finfo in fields.items():
                ftype = getattr(finfo, 'type_', None)
                default = getattr(finfo, 'default', None)
                print(f"    - {fname}: {ftype} (default={default})")
        print()


def build_request(tool, args: Dict[str, Any]):
    url, headers, body = tool._auto_build_request(args)  # type: ignore[attr-defined]
    print("BUILT REQUEST:")
    print("  URL:", url)
    print("  HEADERS:", json.dumps(headers, ensure_ascii=False))
    print("  BODY:", json.dumps(body, ensure_ascii=False) if body is not None else 'None')


async def run_call(tool, args: Dict[str, Any]):
    try:
        result = await tool._arun(**args)  # type: ignore[attr-defined]
        print("CALL RESULT:\n", result)
    except Exception as e:
        print("CALL ERROR:", repr(e))


async def main():
    import argparse

    parser = argparse.ArgumentParser(description="Test auto-generated API tools from app_config.json")
    parser.add_argument("--tool", type=str, default="search_inventory", help="Tool name to test")
    parser.add_argument("--dry-run", action="store_true", help="Only build request; do not perform network call")
    parser.add_argument("--overview", action="store_true", help="Print overview of all API tools and exit")
    args = parser.parse_args()

    if args.overview:
        print_tool_overview()
        return

    tool_cfg = get_api_tool_config(args.tool)
    if tool_cfg is None:
        print(f"Tool '{args.tool}' not found in data/app_config.json or not type=api_tool")
        return

    tool = create_auto_api_tool(args.tool)
    if tool is None:
        print(f"Failed to instantiate tool '{args.tool}'")
        return

    call_args = build_call_args_from_config(tool_cfg)

    # Always show built request
    try:
        build_request(tool, call_args)
    except Exception as e:
        print("BUILD ERROR:", repr(e))
        return

    if not args.dry_run:
        await run_call(tool, call_args)


if __name__ == "__main__":
    asyncio.run(main()) 